# (c) Kreft-inG 2022
# GPL v3
# ---------------
# Pinout see "M0_RP2040_pinout.py"
# ---------------
# To be done checklist
# 1. Logic by AWTRIX , binary controls
# 2. Logic by K-inG ,  binary controls add-on
# 3. Feature Extension: RTC ?
# 4. Testing, Error Debouncing
# 5. Watchdog
# 6. MQTT disconnect warning on Matrix
#  
# ? Pico-Bug? .Can't handle "B" 256 values, just "b" up to 127, and also not string type. Reduce call with framebuffer, do directly
# ? Loudness Workaround. Save relevant files with less volume digital and convert filename to include this
# ----------------------------------
# -----------------------PARAMETER 
matrixname = 'awtrixmatreex'
is_reduced_power_due_to_debug = True
# -------------------------------
# ---------------------- MODULE 1 --
import struct # for decoding AWTRIX commands
import sys
import board
import busio
import digitalio
import time
from adafruit_wiznet5k.adafruit_wiznet5k import *
import adafruit_wiznet5k.adafruit_wiznet5k_socket as socket
#import neopixel
import adafruit_minimqtt.adafruit_minimqtt as MQTT

secrets = {
    'aio_username' : 'bt',
    'aio_key' : 'gate4bt'
    }

SPI1_SCK = board.GP10
SPI1_TX = board.GP11
SPI1_RX = board.GP12
SPI1_CSn = board.GP13
W5500_RSTn = board.GP14

#pixel_pin = board.GP15
#num_pixels = 64

print("Wiznet5k SimpleServer Test (DHCP)")
# Setup your network configuration below
# random MAC, later should change this value on your vendor ID
MY_MAC = (0x00, 0x01, 0x02, 0x03, 0x04, 0x05)
IP_ADDRESS = (192, 168, 178, 30)
SUBNET_MASK = (255, 255, 255, 0)
GATEWAY_ADDRESS = (192, 168, 178, 2)
DNS_SERVER = (192, 168, 178, 2)

RED = (255, 0, 0)
YELLOW = (255, 150, 0)
GREEN = (0, 255, 0)
CYAN = (0, 255, 255)
BLUE = (0, 0, 255)
PURPLE = (180, 0, 255)

led = digitalio.DigitalInOut(board.GP25)
led.direction = digitalio.Direction.OUTPUT

ethernetRst = digitalio.DigitalInOut(W5500_RSTn)
ethernetRst.direction = digitalio.Direction.OUTPUT

# For Adafruit Ethernet FeatherWing
cs = digitalio.DigitalInOut(SPI1_CSn)
# For Particle Ethernet FeatherWing
# cs = digitalio.DigitalInOut(board.D5)

spi_bus = busio.SPI(SPI1_SCK, MOSI=SPI1_TX, MISO=SPI1_RX)

# Reset W5500 first
ethernetRst.value = False
time.sleep(1)
ethernetRst.value = True

# # Initialize ethernet interface without DHCP
# eth = WIZNET5K(spi_bus, cs, is_dhcp=False, mac=MY_MAC, debug=False)
# # Set network configuration
# eth.ifconfig = (IP_ADDRESS, SUBNET_MASK, GATEWAY_ADDRESS, DNS_SERVER)

# Initialize ethernet interface with DHCP
eth = WIZNET5K(spi_bus, cs, is_dhcp=False, mac=MY_MAC, debug=False)

eth.ifconfig = (IP_ADDRESS, SUBNET_MASK, GATEWAY_ADDRESS, DNS_SERVER)

print("Chip Version:", eth.chip)
print("MAC Address:", [hex(i) for i in eth.mac_address])
print("My IP address is:", eth.pretty_ip(eth.ip_address))

#pixels = neopixel.NeoPixel(pixel_pin, num_pixels, brightness=0.05, auto_write=False)

# Setup a feed named 'color_feed' for publishing to a feed
color_feed = secrets["aio_username"] + "/feeds/color"
### Code ###
color_feed = matrixname
# Define callback methods which are called when events occur
# pylint: disable=unused-argument, redefined-outer-name
def connected(client, userdata, flags, rc):
    # This function will be called when the client is connected
    # successfully to the broker.
    print("Connected to MQTT! Listening for topic changes on %s" % color_feed)
    # Subscribe to all changes on the onoff_feed.
    client.subscribe(color_feed)

def disconnected(client, userdata, rc):
    # This method is called when the client is disconnected
    print("Disconnected from MQTT!")





# Initialize MQTT interface with the ethernet interface
MQTT.set_socket(socket, eth)

# Set up a MiniMQTT Client
# NOTE: We'll need to connect insecurely for ethernet configurations.
mqtt_client = MQTT.MQTT(
    broker="192.168.178.26",
    username=secrets["aio_username"],
    password=secrets["aio_key"],
    is_ssl=False,
)

#---------------------------

#---------------------- MODULE 2
import board
import neopixel
from adafruit_pixel_framebuf import PixelFramebuffer
import time

pixel_pin = board.GP15
pixel_width = 8
pixel_height = 8

global pixels
pixels = neopixel.NeoPixel(
    pixel_pin,
    pixel_width * pixel_height,
    brightness=0.1,
    auto_write=False,
)
global pixel_framebuf
pixel_framebuf = PixelFramebuffer(
    pixels,
    pixel_width,
    pixel_height,
    reverse_x=False,
    alternating=False,
    rotation=2
)

def c1_drawBMP():
    print('not implemented')

def c2_drawCircle(x,y,radius,color):
    global pixel_framebuf
    pixel_framebuf.circle(x,y,radius,int(color,16))
    #uint16_t x0_coordinate = int(payload[1] << 8) + int(payload[2]);
    #uint16_t y0_coordinate = int(payload[3] << 8) + int(payload[4]);
    #uint16_t radius = payload[5];
    #matrix->drawCircle(x0_coordinate, y0_coordinate, radius, matrix->Color(payload[6], payload[7], payload[8]));

def c3_drawCircleFill(x,y,radius,color):
    global pixel_framebuf
    pixel_framebuf.circle(x,y,radius,int(color,16))
    for cnt in range(radius):
        pixel_framebuf.circle(x,y,cnt,int(color,16))

def c4_drawPixel(x,y,color):
    global pixel_framebuf
    pixel_framebuf.pixel(x,y,int(color,16))
    #//Prepare the coordinates
    #uint16_t x0_coordinate = int(payload[1] << 8) + int(payload[2]);
    #uint16_t y0_coordinate = int(payload[3] << 8) + int(payload[4]);
    #matrix->drawPixel(x0_coordinate, y0_coordinate, matrix->Color(payload[5], payload[6], payload[7]));
		
def c5_drawRect(x,y,w,h,color):
    global pixel_framebuf
    pixel_framebuf.rect(x,y,w,h,int(color,16))
    #uint16_t x0_coordinate = int(payload[1] << 8) + int(payload[2]);
    #uint16_t y0_coordinate = int(payload[3] << 8) + int(payload[4]);
    #int16_t width = payload[5];
    #int16_t height = payload[6];
    #matrix->drawRect(x0_coordinate, y0_coordinate, width, height, matrix->Color(payload[7], payload[8], payload[9]));

def c6_drawLine(x0,y0,x1,y1,color):
    global pixel_framebuf
    pixel_framebuf.line(x0,y0,x1,y1,int(color,16))
    #uint16_t x0_coordinate = int(payload[1] << 8) + int(payload[2]);
    #uint16_t y0_coordinate = int(payload[3] << 8) + int(payload[4]);
    #uint16_t x1_coordinate = int(payload[5] << 8) + int(payload[6]);
    #uint16_t y1_coordinate = int(payload[7] << 8) + int(payload[8]);
    #matrix->drawLine(x0_coordinate, y0_coordinate, x1_coordinate, y1_coordinate, matrix->Color(payload[9], payload[10], payload[11]));	
    
def c7_drawScreen(color):
    global pixel_framebuf
    pixel_framebuf.fill(int(color,16))
    
def c8_drawDisplay():
    global pixel_framebuf
    pixel_framebuf.display()
    
def c9_drawClear():
    global pixel_framebuf
    pixel_framebuf.fill(0x000000)
    
def c13_drawBrightness(value):
    global pixels
    pixels.brightness=value
   
def c0_drawText(x,y,mytext,color):
    global pixel_framebuf
    pixel_framebuf.text(mytext,x,y,int(color,16))

def c20_drawText(x,y,mytext,color):
    global pixel_framebuf
    pixel_framebuf.text(mytext,x,y,int(color,16))
        
# -----------------

#---------------------- MODULE 3
import board
import busio
import time
from adafruit_ht16k33.segments import BigSeg7x4
i2c = busio.I2C(board.GP17, board.GP16)
global display
display = BigSeg7x4(i2c,address=0x70)
display.brightness = 0.5
display.print("12:34")
time.sleep(0.1)
display[0] = '4'
display[1] = '5'
display[2] = 'A'
display[3] = 'B'
display.colon= False
display.show()
time.sleep(0.1)
display.print("    ")

def display7seg_string(mystring):
    global display
    if len(mystring) > 3 and len(mystring) <6 :
        display.print(mystring)
        display.show()
    
def display7seg_blink(blinkrate):
    global display
    if blinkrate > -1 and blinkrate < 4:
        display.blink_rate = blinkrate
        display.show()
    
def display7seg_brightness(value):
    global display
    if value >= 0 and value <=1.0:
        display.brightness = value
        
#time.sleep(2)
#display.marquee('zEIT aUf', 0.25, False)
#---------------------------



#---------------------- MODULE 4
#--  Input Pushbutton -  with debouncer
import digitalio
import board
import time
from adafruit_debouncer import Debouncer

#Middle Button: S5=Pin5 on wheel, GP26 at RP2040
button_middle = digitalio.DigitalInOut(board.GP18)
button_middle.switch_to_input(pull=digitalio.Pull.UP)
button_middle = Debouncer(button_middle)
button_middle.update()

#Right Button: S1=Pin3 on wheel, GP28 at RP2040
button_right = digitalio.DigitalInOut(board.GP19)
button_right.switch_to_input(pull=digitalio.Pull.UP)
button_right = Debouncer(button_right)
button_right.update()

#Left Button: S3=Pin8 on wheel, GP19 at RP2040
button_left = digitalio.DigitalInOut(board.GP20)
button_left.switch_to_input(pull=digitalio.Pull.UP)
button_left = Debouncer(button_left)
button_left.update()

#Top Button: S4=Pin7 on wheel, GP20 at RP2040
button_top = digitalio.DigitalInOut(board.GP21)
button_top.switch_to_input(pull=digitalio.Pull.UP)
button_top = Debouncer(button_top)
button_top.update()


# ------------------------------

# -----------------Module 5

# SPDX-FileCopyrightText: 2021 ladyada for Adafruit Industries
# SPDX-License-Identifier: MIT

import time
import board
import busio
import adafruit_tsl2561

# Create the I2C bus
i2c = busio.I2C(board.GP27, board.GP26)

# Create the TSL2561 instance, passing in the I2C bus
tsl = adafruit_tsl2561.TSL2561(i2c)

# Print chip info
print("Chip ID = {}".format(tsl.chip_id))
print("Enabled = {}".format(tsl.enabled))
print("Gain = {}".format(tsl.gain))
print("Integration time = {}".format(tsl.integration_time))

print("Configuring TSL2561...")

# Enable the light sensor
tsl.enabled = True
time.sleep(1)

# Set gain 0=1x, 1=16x
tsl.gain = 0

# Set integration time (0=13.7ms, 1=101ms, 2=402ms, or 3=manual)
tsl.integration_time = 1

print("Getting readings...")

# Get raw (luminosity) readings individually
broadband = tsl.broadband
infrared = tsl.infrared

# Get raw (luminosity) readings using tuple unpacking
# broadband, infrared = tsl.luminosity

# Get computed lux value (tsl.lux can return None or a float)
lux = tsl.lux

# Print results
print("Enabled = {}".format(tsl.enabled))
print("Gain = {}".format(tsl.gain))
print("Integration time = {}".format(tsl.integration_time))
print("Broadband = {}".format(broadband))
print("Infrared = {}".format(infrared))
if lux is not None:
    print("Lux = {}".format(lux))
else:
    print("Lux value is None. Possible sensor underrange or overrange.")

# Disble the light sensor (to save power)
#tsl.enabled = False
def getlux():
    tsl.gain = 0
    lux = tsl.lux
    if lux is not None:
        return lux
    else:
        tsl.gain = 8
        lux = tsl.lux
        if lux is not None:
            return lux
        else:
            return -1
        
            
#--------------------------------

# ----------------Module 7
"""
CircuitPython I2S MP3 playback example.
Plays a single MP3 once.
"""
import board
import audiomp3
import audiobusio

import busio
import sdcardio
import storage



# # MicroSD SPI Pins
# * MicroSD MISO pin to Pico GPIO-12
# * MicroSD MOSI pin to Pico GPIO-11
# * MicroSD SCK pin to Pico GPIO-10
# * MicroSD CS pin to Pico GPIO-13
 
spi=busio.SPI(clock=board.GP2,MOSI=board.GP3,MISO=board.GP4)
cs=board.GP5

sdcard = sdcardio.SDCard(spi, cs)
vfs = storage.VfsFat(sdcard)
storage.mount(vfs, "/sd")

audio = audiobusio.I2SOut(board.GP0, board.GP1, board.GP6)
#001_32kbps_fs24kHz_mono.mp3 - Dong. tunes 
#002_32kbps_fs24kHz_mono.mp3 - Dong, dong, waser hintergrund
#003_32kbps_fs24kHz_mono.mp3
#004_32kbps_fs24kHz_mono.mp3
#005_32kbps_fs24kHz_mono.mp3
#006_32kbps_fs24kHz_mono.mp3
#007_32kbps_fs24kHz_mono.mp3
#008_32kbps_fs24kHz_mono.mp3
#009_32kbps_fs24kHz_mono.mp3
#010_32kbps_fs24kHz_mono.mp3
#011_32kbps_fs24kHz_mono.mp3
#012_32kbps_fs24kHz_mono.mp3
#013_32kbps_fs24kHz_mono.mp3
#014_32kbps_fs24kHz_mono.mp3
#015_32kbps_fs24kHz_mono.mp3
#016_32kbps_fs24kHz_mono.mp3
#017_32kbps_fs24kHz_mono.mp3
#018_32kbps_fs24kHz_mono.mp3
#019_32kbps_fs24kHz_mono.mp3

mp3 = audiomp3.MP3Decoder(open("/sd/014_32kbps_fs24kHz_mono.mp3", "rb"))

audio.play(mp3)
time.sleep(1)
audio.stop()
#while audio.playing:
#    pass#
#
#print("Done playing!")
        
def song_stop():
    audio.stop()


def song_play(songnr, vol):
    if songnr > 2 and songnr < 20:
        nrstring = ""
        if songnr < 10:
            nrstring="00"+str(songnr)
        else:
            nrstring="0"+str(songnr)
        filename="/sd/" + nrstring + "_32kbps_fs24kHz_mono.mp3"
        mp3 = audiomp3.MP3Decoder(open(filename, "rb"))
        audio.play(mp3)
    if songnr == 1:
        song_stop()
    
def status_audioplaying():
    if audio.playing:
        return True
    else:
        return False


# ----------------Module 8
RGB_bmp=[
#    # 00: Wifi
    [0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
     0x0000, 0x0000, 0xffff, 0xffff, 0xffff, 0xffff, 0x0000, 0x0000,
     0x0000, 0xffff, 0x0000, 0x0000, 0x0000, 0x0000, 0xffff, 0x0000,
     0xffff, 0x0000, 0x0000, 0xffff, 0xffff, 0x0000, 0x0000, 0xffff,
     0x0000, 0x0000, 0xffff, 0x0000, 0x0000, 0xffff, 0x0000, 0x0000,
     0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
     0x0000, 0x0000, 0x0000, 0xffff, 0xffff, 0x0000, 0x0000, 0x0000,
     0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000
    ],
#    # 01: MQTT
    [
     0xb01f, 0xb01f, 0xb01f, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
     0x0000, 0x0000, 0x0000, 0xb01f, 0xb01f, 0x0000, 0x0000, 0x0000,
     0xb01f, 0xb01f, 0x0000, 0x0000, 0x0000, 0xb01f, 0x0000, 0x0000,
     0x0000, 0x0000, 0xb01f, 0xb01f, 0x0000, 0x0000, 0xb01f, 0x0000,
     0xb01f, 0xb01f, 0x0000, 0x0000, 0xb01f, 0x0000, 0xb01f, 0x0000,
     0x0000, 0x0000, 0xb01f, 0x0000, 0xb01f, 0x0000, 0x0000, 0xb01f,
     0x0000, 0x0000, 0x0000, 0xb01f, 0x0000, 0xb01f, 0x0000, 0xb01f,
     0x0000, 0x0000, 0x0000, 0xb01f, 0x0000, 0xb01f, 0x0000, 0xb01f
    ],
     #    # 02: DNS
         [
     0x0000, 0x0000, 0x04bf, 0x04bf, 0x04bf, 0x04bf, 0x0000, 0x0000,
     0x0000, 0x04bf, 0x0000, 0x0000, 0x0000, 0x0000, 0x04bf, 0x0000,
     0x04bf, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x04bf,
     0x04bf, 0x0000, 0x04bf, 0x0000, 0x04bf, 0x0000, 0x0000, 0x04bf,
     0x04bf, 0x0000, 0x04bf, 0x04bf, 0x04bf, 0x04bf, 0x0000, 0x04bf,
     0x04bf, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x04bf,
     0x0000, 0x04bf, 0x0000, 0x0000, 0x0000, 0x0000, 0x04bf, 0x0000,
     0x0000, 0x0000, 0x04bf, 0x04bf, 0x04bf, 0x04bf, 0x0000, 0x0000
    ],
     
         # 03: clock
    [
     0x0000, 0x0000, 0x8410, 0x8410, 0x8410, 0x8410, 0x0000, 0x0000,
     0x0000, 0x8410, 0x0000, 0x8410, 0x0000, 0x0000, 0x8410, 0x0000,
     0x8410, 0x0000, 0x0000, 0x8410, 0x0000, 0x0000, 0x0000, 0x8410,
     0x8410, 0x0000, 0x0000, 0x8410, 0x0000, 0x0000, 0x0000, 0x8410,
     0x8410, 0x0000, 0x0000, 0xf800, 0x8410, 0x8410, 0x0000, 0x8410,
     0x8410, 0x0000, 0xf800, 0x0000, 0x0000, 0x0000, 0x0000, 0x8410,
     0x0000, 0x8410, 0x0000, 0x0000, 0x0000, 0x0000, 0x8410, 0x0000,
     0x0000, 0x0000, 0x8410, 0x8410, 0x8410, 0x8410, 0x0000, 0x0000
    ],
          
         # 04: Youtube
    [
     0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
     0x0000, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0x0000,
     0xf800, 0xf800, 0xf800, 0xffff, 0xf800, 0xf800, 0xf800, 0xf800,
     0xf800, 0xf800, 0xf800, 0xffff, 0xffff, 0xf800, 0xf800, 0xf800,
     0xf800, 0xf800, 0xf800, 0xffff, 0xffff, 0xf800, 0xf800, 0xf800,
     0xf800, 0xf800, 0xf800, 0xffff, 0xf800, 0xf800, 0xf800, 0xf800,
     0x0000, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0x0000,
     0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000
    ],
     
         # 05: Youtube views
    [
     0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
     0x0000, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0x0000,
     0xf800, 0xf800, 0xf800, 0xffff, 0xf800, 0xf800, 0xf800, 0xf800,
     0xf800, 0xf800, 0xf800, 0xffff, 0xffff, 0xf800, 0xf800, 0xf800,
     0xf800, 0xf800, 0xf800, 0xffff, 0xffff, 0xf800, 0xf800, 0xf800,
     0xf800, 0xf800, 0xf800, 0xffff, 0xf800, 0x013f, 0xf800, 0x013f,
     0x0000, 0xf800, 0xf800, 0xf800, 0xf800, 0x013f, 0xf800, 0x013f,
     0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x013f, 0x0000
    ],
     
         # 06: car
    [
     0x0000, 0x0000, 0xfec0, 0xfec0, 0xfec0, 0xfec0, 0x0000, 0x0000,
     0x0000, 0xfec0, 0x0000, 0x0000, 0x0000, 0x0000, 0xfec0, 0x0000,
     0xfec0, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xfec0,
     0xfec0, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xfec0,
     0xfec0, 0xfec0, 0xfec0, 0xfec0, 0xfec0, 0xfec0, 0xfec0, 0xfec0,
     0xfec0, 0x0000, 0xfec0, 0xfec0, 0xfec0, 0xfec0, 0x0000, 0xfec0,
     0xfec0, 0xfec0, 0xfec0, 0xfec0, 0xfec0, 0xfec0, 0xfec0, 0xfec0,
     0x0000, 0xfec0, 0xfec0, 0x0000, 0x0000, 0xfec0, 0xfec0, 0x0000
    ],
     
         # 07: car_vitamaxi
    [
     0x0000, 0x0000, 0xfec0, 0xfec0, 0xfec0, 0xfec0, 0x0000, 0x0000,
     0x0000, 0xfec0, 0x0000, 0x0000, 0x0000, 0x0000, 0xfec0, 0x0000,
     0xfec0, 0x0000, 0x0000, 0x013f, 0x0000, 0x0000, 0x0000, 0x013f,
     0xfec0, 0x0000, 0x0000, 0x013f, 0x0000, 0x0000, 0x0000, 0x013f,
     0xfec0, 0xfec0, 0xfec0, 0x013f, 0xfec0, 0xfec0, 0xfec0, 0x013f,
     0xfec0, 0x0000, 0xfec0, 0xfec0, 0x013f, 0xfec0, 0x013f, 0xfec0,
     0xfec0, 0xfec0, 0xfec0, 0xfec0, 0x013f, 0xfec0, 0x013f, 0xfec0,
     0x0000, 0xfec0, 0xfec0, 0x0000, 0x0000, 0x013f, 0xfec0, 0x0000
    ],
     
         # 08: car telekom
    [
     0x0000, 0x0000, 0xfec0, 0xfec0, 0xfec0, 0xfec0, 0x0000, 0x0000,
     0x0000, 0xfec0, 0x0000, 0x0000, 0x0000, 0x0000, 0xfec0, 0x0000,
     0xfec0, 0x0000, 0x0000, 0xf81b, 0xf81b, 0xf81b, 0xf81b, 0xf81b,
     0xfec0, 0x0000, 0x0000, 0xf81b, 0x0000, 0xf81b, 0x0000, 0xf81b,
     0xfec0, 0xfec0, 0xfec0, 0xfec0, 0xfec0, 0xf81b, 0xfec0, 0xfec0,
     0xfec0, 0x0000, 0xfec0, 0xfec0, 0xfec0, 0xf81b, 0x0000, 0xfec0,
     0xfec0, 0xfec0, 0xfec0, 0xfec0, 0xfec0, 0xf81b, 0xfec0, 0xfec0,
     0x0000, 0xfec0, 0xfec0, 0x0000, 0xf81b, 0xf81b, 0xf81b, 0x0000
    ],
     
         # 09: Temperature
    [
     0x0000, 0x0000, 0x0000, 0xffff, 0x0000, 0x0000, 0x0000, 0x0000,
     0x0000, 0x0000, 0xffff, 0x07e4, 0xffff, 0x0000, 0x0000, 0x0000,
     0x0000, 0xffff, 0xffff, 0x07e4, 0xffff, 0x0000, 0x0000, 0x0000,
     0x0000, 0x0000, 0xffff, 0x07e4, 0xffff, 0x0000, 0x0000, 0x0000,
     0x0000, 0x0000, 0xffff, 0x07e4, 0xffff, 0x0000, 0x0000, 0x0000,
     0x0000, 0xffff, 0x07e4, 0x07e4, 0x07e4, 0xffff, 0x0000, 0x0000,
     0x0000, 0xffff, 0x07e4, 0x07e4, 0x07e4, 0xffff, 0x0000, 0x0000,
     0x0000, 0x0000, 0xffff, 0xffff, 0xffff, 0x0000, 0x0000, 0x0000
    ],
     
         # 10: Temp max
    [
     0x0000, 0x0000, 0x0000, 0xffff, 0x0000, 0x0000, 0x0000, 0xf800,
     0x0000, 0x0000, 0xffff, 0x07e4, 0xffff, 0x0000, 0xf800, 0xf800,
     0x0000, 0xffff, 0xffff, 0x07e4, 0xffff, 0xf800, 0xf800, 0xf800,
     0x0000, 0x0000, 0xffff, 0x07e4, 0xffff, 0x0000, 0x0000, 0xf800,
     0x0000, 0x0000, 0xffff, 0x07e4, 0xffff, 0x0000, 0x0000, 0xf800,
     0x0000, 0xffff, 0x07e4, 0x07e4, 0x07e4, 0xffff, 0x0000, 0xf800,
     0x0000, 0xffff, 0x07e4, 0x07e4, 0x07e4, 0xffff, 0x0000, 0x0000,
     0x0000, 0x0000, 0xffff, 0xffff, 0xffff, 0x0000, 0x0000, 0x0000
    ],
     
         # 11: Temp min
    [
     0x0000, 0x0000, 0x0000, 0xffff, 0x0000, 0x0000, 0x0000, 0x0000,
     0x0000, 0x0000, 0xffff, 0x07e4, 0xffff, 0x0000, 0x0000, 0x0000,
     0x0000, 0xffff, 0xffff, 0x07e4, 0xffff, 0x0000, 0x0000, 0x013f,
     0x0000, 0x0000, 0xffff, 0x07e4, 0xffff, 0x0000, 0x0000, 0x013f,
     0x0000, 0x0000, 0xffff, 0x07e4, 0xffff, 0x0000, 0x0000, 0x013f,
     0x0000, 0xffff, 0x07e4, 0x07e4, 0x07e4, 0x013f, 0x013f, 0x013f,
     0x0000, 0xffff, 0x07e4, 0x07e4, 0x07e4, 0xffff, 0x013f, 0x013f,
     0x0000, 0x0000, 0xffff, 0xffff, 0xffff, 0x0000, 0x0000, 0x013f
    ],
     
         # 12: Pound
    [
     0x0000, 0x0000, 0x0000, 0xfb40, 0xfb40, 0xfb40, 0x0000, 0x0000,
     0x0000, 0x0000, 0xfb40, 0x0000, 0x0000, 0xfb40, 0x0000, 0x0000,
     0x0000, 0x0000, 0xfb40, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
     0x0000, 0xfb40, 0xfb40, 0xfb40, 0xfb40, 0x0000, 0x0000, 0x0000,
     0x0000, 0x0000, 0xfb40, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
     0x0000, 0x0000, 0xfb40, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
     0x0000, 0xfb40, 0xfb40, 0xfb40, 0xfb40, 0xfb40, 0x0000, 0x0000,
     0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000
    ],
     
         # 13: clear sun
    [
     0xfec0, 0x0000, 0x0000, 0x0000, 0xfec0, 0x0000, 0x0000, 0xfec0,
     0x0000, 0xfec0, 0x0000, 0x0000, 0x0000, 0x0000, 0xfec0, 0x0000,
     0x0000, 0x0000, 0x0000, 0xfec0, 0xfec0, 0x0000, 0x0000, 0x0000,
     0x0000, 0x0000, 0xfec0, 0xfec0, 0xfec0, 0xfec0, 0x0000, 0xfec0,
     0xfec0, 0x0000, 0xfec0, 0xfec0, 0xfec0, 0xfec0, 0x0000, 0x0000,
     0x0000, 0x0000, 0x0000, 0xfec0, 0xfec0, 0x0000, 0x0000, 0x0000,
     0x0000, 0xfec0, 0x0000, 0x0000, 0x0000, 0x0000, 0xfec0, 0x0000,
     0xfec0, 0x0000, 0x0000, 0xfec0, 0x0000, 0x0000, 0x0000, 0xfec0
    ],
     
         # 14: clear night
    [
     0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
     0x0000, 0x0000, 0xffff, 0x0000, 0x0000, 0xffff, 0x0000, 0x0000,
     0x0000, 0xffff, 0xffff, 0xffff, 0x0000, 0x0000, 0x0000, 0x0000,
     0x0000, 0x0000, 0xffff, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
     0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xffff, 0x0000,
     0x0000, 0xffff, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
     0x0000, 0x0000, 0x0000, 0x0000, 0xffff, 0x0000, 0x0000, 0x0000,
     0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000
    ],
     
         # 15: rain
    [
     0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
     0x0000, 0x0000, 0x0000, 0x04bf, 0x0000, 0x0000, 0x04bf, 0x0000,
     0x0000, 0x0000, 0x04bf, 0x0000, 0x0000, 0x04bf, 0x0000, 0x0000,
     0x0000, 0x04bf, 0x0000, 0x0000, 0x04bf, 0x0000, 0x0000, 0x0000,
     0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
     0x0000, 0x0000, 0x0000, 0x04bf, 0x0000, 0x0000, 0x04bf, 0x0000,
     0x0000, 0x0000, 0x04bf, 0x0000, 0x0000, 0x04bf, 0x0000, 0x0000,
     0x0000, 0x04bf, 0x0000, 0x0000, 0x04bf, 0x0000, 0x0000, 0x0000
    ],
     
         # 16: Snow
    [
     0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
     0xffff, 0x0000, 0x0000, 0xffff, 0x0000, 0x0000, 0xffff, 0x0000,
     0x0000, 0xffff, 0x0000, 0xffff, 0x0000, 0xffff, 0x0000, 0x0000,
     0x0000, 0x0000, 0xffff, 0xffff, 0xffff, 0x0000, 0x0000, 0x0000,
     0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0x0000,
     0x0000, 0x0000, 0xffff, 0xffff, 0xffff, 0x0000, 0x0000, 0x0000,
     0x0000, 0xffff, 0x0000, 0xffff, 0x0000, 0xffff, 0x0000, 0x0000,
     0xffff, 0x0000, 0x0000, 0xffff, 0x0000, 0x0000, 0xffff, 0x0000
    ],
    # 17: sleet
    [
     0x0000, 0x0000, 0xffff, 0x0000, 0x0000, 0x0000, 0x0000, 0x04bf,
     0x0000, 0xffff, 0xffff, 0xffff, 0x0000, 0x0000, 0x04bf, 0x0000,
     0x0000, 0x0000, 0xffff, 0x0000, 0x0000, 0x04bf, 0x0000, 0x0000,
     0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
     0x0000, 0x0000, 0x04bf, 0x0000, 0x0000, 0xffff, 0x0000, 0x0000,
     0x0000, 0x04bf, 0x0000, 0x0000, 0xffff, 0xffff, 0xffff, 0x0000,
     0x04bf, 0x0000, 0x0000, 0x0000, 0x0000, 0xffff, 0x0000, 0x0000,
     0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000
    ],
    # 18: windy
    [
     0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xffff, 0x0000,
     0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0x0000, 0x0000, 0xffff,
     0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xffff,
     0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0x0000,
     0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
     0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0x0000, 0x0000,
     0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xffff, 0x0000,
     0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xffff, 0x0000, 0x0000
    ],
    # 19: fog
    [
     0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
     0x0000, 0x0000, 0xffff, 0xffff, 0x0000, 0x0000, 0xffff, 0xffff,
     0xffff, 0xffff, 0x0000, 0x0000, 0xffff, 0xffff, 0x0000, 0x0000,
     0x0000, 0x0000, 0xffff, 0xffff, 0x0000, 0x0000, 0xffff, 0xffff,
     0xffff, 0xffff, 0x0000, 0x0000, 0xffff, 0xffff, 0x0000, 0x0000,
     0x0000, 0x0000, 0xffff, 0xffff, 0x0000, 0x0000, 0xffff, 0xffff,
     0xffff, 0xffff, 0x0000, 0x0000, 0xffff, 0xffff, 0x0000, 0x0000,
     0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000
    ],
    # 20: cloud
    [
     0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
     0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
     0x0000, 0x0000, 0x0000, 0x0000, 0x8410, 0x8410, 0x8410, 0x0000,
     0x0000, 0x0000, 0x8410, 0x8410, 0xffff, 0xffff, 0xffff, 0x8410,
     0x0000, 0x8410, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0x8410,
     0x0000, 0x8410, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0x8410,
     0x0000, 0x0000, 0x8410, 0x8410, 0x8410, 0x8410, 0x8410, 0x0000,
     0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000
    ],
    # 21: partly cloudy
    [
     0xfec0, 0x0000, 0x0000, 0x0000, 0xfec0, 0x0000, 0x0000, 0xfec0,
     0x0000, 0xfec0, 0x0000, 0x0000, 0x0000, 0x0000, 0xfec0, 0x0000,
     0x0000, 0x0000, 0x0000, 0xfec0, 0xfec0, 0x0000, 0x0000, 0x0000,
     0x0000, 0x0000, 0xfec0, 0xfec0, 0x8410, 0x8410, 0x8410, 0xfec0,
     0xfec0, 0x0000, 0x8410, 0x8410, 0xffff, 0xffff, 0xffff, 0x8410,
     0x0000, 0x8410, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0x8410,
     0x0000, 0x8410, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0x8410,
     0xfec0, 0x0000, 0x8410, 0x8410, 0x8410, 0x8410, 0x8410, 0xfec0
    ],
    # 22: cloudy night
    [
     0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
     0x0000, 0x0000, 0xffff, 0x0000, 0x0000, 0xffff, 0x0000, 0x0000,
     0x0000, 0xffff, 0xffff, 0xffff, 0x0000, 0x0000, 0x0000, 0x0000,
     0x0000, 0x0000, 0xffff, 0x0000, 0x8410, 0x8410, 0x8410, 0x0000,
     0x0000, 0x0000, 0x8410, 0x8410, 0xffff, 0xffff, 0xffff, 0x8410,
     0x0000, 0x8410, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0x8410,
     0x0000, 0x8410, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0x8410,
     0x0000, 0x0000, 0x8410, 0x8410, 0x8410, 0x8410, 0x8410, 0x0000
    ],
    # 23: windspeed
    [
     0x0000, 0x0000, 0x0000, 0x013f, 0x013f, 0x013f, 0x0000, 0x0000,
     0x0000, 0x0000, 0x0000, 0x013f, 0x0000, 0x0000, 0x0000, 0x0000,
     0x0000, 0x0000, 0x0000, 0x013f, 0x013f, 0x013f, 0x0000, 0x0000,
     0x0000, 0x0000, 0x0000, 0x013f, 0x0000, 0x0000, 0x0000, 0x0000,
     0x0000, 0x0000, 0x013f, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
     0x0000, 0x0000, 0x013f, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
     0x0000, 0x013f, 0x013f, 0x013f, 0x0000, 0x0000, 0x0000, 0x0000,
     0x0000, 0x013f, 0x013f, 0x013f, 0x0000, 0x0000, 0x0000, 0x0000
    ],
    # 24: solar
    [
     0xfec0, 0x0000, 0xfec0, 0xfec0, 0xfec0, 0xfec0, 0x0000, 0xfec0,
     0x0000, 0x0000, 0x0000, 0xfec0, 0xfec0, 0x0000, 0x0000, 0x0000,
     0x0000, 0xfec0, 0x0000, 0x0000, 0x0000, 0x0000, 0xfec0, 0x0000,
     0x0000, 0x0000, 0x0000, 0xfec0, 0xfec0, 0x0000, 0x0000, 0x0000,
     0x0000, 0x013f, 0x013f, 0x013f, 0x013f, 0x013f, 0x013f, 0x013f,
     0x0000, 0x013f, 0x04bf, 0x013f, 0x04bf, 0x013f, 0x04bf, 0x013f,
     0x013f, 0x04bf, 0x013f, 0x04bf, 0x013f, 0x04bf, 0x013f, 0x0000,
     0x013f, 0x013f, 0x013f, 0x013f, 0x013f, 0x013f, 0x013f, 0x0000
    ],
    # 25: no data
    [
     0x0000, 0xfb40, 0xfb40, 0xfb40, 0xfb40, 0xfb40, 0xfb40, 0x0000,
     0xfb40, 0xfb40, 0xfb40, 0xfb40, 0xfb40, 0xfb40, 0xfb40, 0xfb40,
     0xfb40, 0xfb40, 0xfb40, 0xf800, 0xfb40, 0xfb40, 0xfb40, 0xf800,
     0xfb40, 0xfb40, 0xfb40, 0xfb40, 0xf800, 0xfb40, 0xf800, 0xfb40,
     0xfb40, 0xfb40, 0xfb40, 0xfb40, 0xfb40, 0xf800, 0xfb40, 0xfb40,
     0xfb40, 0xfb40, 0xfb40, 0xfb40, 0xf800, 0xfb40, 0xf800, 0xfb40,
     0xfb40, 0xfb40, 0xfb40, 0xf800, 0xfb40, 0xfb40, 0xfb40, 0xf800,
     0x0000, 0xfb40, 0xfb40, 0xfb40, 0xfb40, 0xfb40, 0xfb40, 0x0000
    ],
    # 26: temp max tomorrow
    [
     0xfb40, 0xfb40, 0x0000, 0xffff, 0x0000, 0x0000, 0x0000, 0xf800,
     0xfb40, 0x0000, 0xffff, 0x07e4, 0xffff, 0x0000, 0xf800, 0xf800,
     0xfb40, 0xffff, 0xffff, 0x07e4, 0xffff, 0xf800, 0xf800, 0xf800,
     0xfb40, 0x0000, 0xffff, 0x07e4, 0xffff, 0x0000, 0x0000, 0xf800,
     0x0000, 0x0000, 0xffff, 0x07e4, 0xffff, 0x0000, 0x0000, 0xf800,
     0x0000, 0xffff, 0x07e4, 0x07e4, 0x07e4, 0xffff, 0x0000, 0xf800,
     0x0000, 0xffff, 0x07e4, 0x07e4, 0x07e4, 0xffff, 0x0000, 0x0000,
     0x0000, 0x0000, 0xffff, 0xffff, 0xffff, 0x0000, 0x0000, 0x0000
    ],
    # 27: temp min tomorrow
    [
     0xfb40, 0xfb40, 0x0000, 0xffff, 0x0000, 0x0000, 0x0000, 0x0000,
     0xfb40, 0x0000, 0xffff, 0x07e4, 0xffff, 0x0000, 0x0000, 0x0000,
     0xfb40, 0xffff, 0xffff, 0x07e4, 0xffff, 0x0000, 0x0000, 0x013f,
     0xfb40, 0x0000, 0xffff, 0x07e4, 0xffff, 0x0000, 0x0000, 0x013f,
     0x0000, 0x0000, 0xffff, 0x07e4, 0xffff, 0x0000, 0x0000, 0x013f,
     0x0000, 0xffff, 0x07e4, 0x07e4, 0x07e4, 0x013f, 0x013f, 0x013f,
     0x0000, 0xffff, 0x07e4, 0x07e4, 0x07e4, 0xffff, 0x013f, 0x013f,
     0x0000, 0x0000, 0xffff, 0xffff, 0xffff, 0x0000, 0x0000, 0x013f
    ],
    # 28: wind tomorrow
    [
     0xfb40, 0xfb40, 0x0000, 0x013f, 0x013f, 0x013f, 0x0000, 0x0000,
     0xfb40, 0x0000, 0x0000, 0x013f, 0x0000, 0x0000, 0x0000, 0x0000,
     0xfb40, 0x0000, 0x0000, 0x013f, 0x013f, 0x013f, 0x0000, 0x0000,
     0xfb40, 0x0000, 0x0000, 0x013f, 0x0000, 0x0000, 0x0000, 0x0000,
     0x0000, 0x0000, 0x013f, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
     0x0000, 0x0000, 0x013f, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
     0x0000, 0x013f, 0x013f, 0x013f, 0x0000, 0x0000, 0x0000, 0x0000,
     0x0000, 0x013f, 0x013f, 0x013f, 0x0000, 0x0000, 0x0000, 0x0000
    ],
    # 29: rain tomorrow
    [
     0xfb40, 0xfb40, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
     0xfb40, 0x0000, 0x0000, 0x04bf, 0x0000, 0x0000, 0x04bf, 0x0000,
     0xfb40, 0x0000, 0x04bf, 0x0000, 0x0000, 0x04bf, 0x0000, 0x0000,
     0xfb40, 0x04bf, 0x0000, 0x0000, 0x04bf, 0x0000, 0x0000, 0x0000,
     0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
     0x0000, 0x0000, 0x0000, 0x04bf, 0x0000, 0x0000, 0x04bf, 0x0000,
     0x0000, 0x0000, 0x04bf, 0x0000, 0x0000, 0x04bf, 0x0000, 0x0000,
     0x0000, 0x04bf, 0x0000, 0x0000, 0x04bf, 0x0000, 0x0000, 0x0000
    ],
    # 30: snow tomorrow
    [
     0xfb40, 0xfb40, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
     0xffff, 0x0000, 0x0000, 0xffff, 0x0000, 0x0000, 0xffff, 0x0000,
     0xfb40, 0xffff, 0x0000, 0xffff, 0x0000, 0xffff, 0x0000, 0x0000,
     0xfb40, 0x0000, 0xffff, 0xffff, 0xffff, 0x0000, 0x0000, 0x0000,
     0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0x0000,
     0x0000, 0x0000, 0xffff, 0xffff, 0xffff, 0x0000, 0x0000, 0x0000,
     0x0000, 0xffff, 0x0000, 0xffff, 0x0000, 0xffff, 0x0000, 0x0000,
     0xffff, 0x0000, 0x0000, 0xffff, 0x0000, 0x0000, 0xffff, 0x0000
    ],
    # 31: sleet tomorrow
    [
     0xfb40, 0xfb40, 0xffff, 0x0000, 0x0000, 0x0000, 0x0000, 0x04bf,
     0xfb40, 0xffff, 0xffff, 0xffff, 0x0000, 0x0000, 0x04bf, 0x0000,
     0xfb40, 0x0000, 0xffff, 0x0000, 0x0000, 0x04bf, 0x0000, 0x0000,
     0xfb40, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
     0x0000, 0x0000, 0x04bf, 0x0000, 0x0000, 0xffff, 0x0000, 0x0000,
     0x0000, 0x04bf, 0x0000, 0x0000, 0xffff, 0xffff, 0xffff, 0x0000,
     0x04bf, 0x0000, 0x0000, 0x0000, 0x0000, 0xffff, 0x0000, 0x0000,
     0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000
    ],
    # 32: cloud tomorrow
    [
     0xfb40, 0xfb40, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
     0xfb40, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
     0xfb40, 0x0000, 0x0000, 0x0000, 0x8410, 0x8410, 0x8410, 0x0000,
     0xfb40, 0x0000, 0x8410, 0x8410, 0xffff, 0xffff, 0xffff, 0x8410,
     0x0000, 0x8410, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0x8410,
     0x0000, 0x8410, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0x8410,
     0x0000, 0x0000, 0x8410, 0x8410, 0x8410, 0x8410, 0x8410, 0x0000,
     0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000
    ],
    # 33: sunset
    [
     0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xffff, 0x0000,
     0x0000, 0x0000, 0x0000, 0xffff, 0x0000, 0xffff, 0x0000, 0x0000,
     0x0000, 0x0000, 0x0000, 0xffff, 0xffff, 0x0000, 0x0000, 0x0000,
     0x0000, 0x0000, 0x0000, 0xffff, 0xffff, 0xffff, 0x0000, 0x0000,
     0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
     0x0000, 0x0000, 0xfb40, 0xfb40, 0xfb40, 0xfb40, 0x0000, 0x0000,
     0x0000, 0xfb40, 0xfb40, 0xfb40, 0xfb40, 0xfb40, 0xfb40, 0x0000,
     0x4208, 0x4208, 0x4208, 0x4208, 0x4208, 0x4208, 0x4208, 0x4208
    ],
    # 34: sunrise
    [
     0x0000, 0x0000, 0x0000, 0x0000, 0xffff, 0xffff, 0xffff, 0x0000,
     0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xffff, 0xffff, 0x0000,
     0x0000, 0x0000, 0x0000, 0x0000, 0xffff, 0x0000, 0xffff, 0x0000,
     0x0000, 0x0000, 0x0000, 0xffff, 0x0000, 0x0000, 0x0000, 0x0000,
     0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
     0x0000, 0x0000, 0xfb40, 0xfb40, 0xfb40, 0xfb40, 0x0000, 0x0000,
     0x0000, 0xfb40, 0xfb40, 0xfb40, 0xfb40, 0xfb40, 0xfb40, 0x0000,
     0x4208, 0x4208, 0x4208, 0x4208, 0x4208, 0x4208, 0x4208, 0x4208
    ],
    # 35: euro
    [
     0x0000, 0x0000, 0x0000, 0x013f, 0x013f, 0x013f, 0x0000, 0x0000,
     0x0000, 0x0000, 0x013f, 0x0000, 0x0000, 0x0000, 0x013f, 0x0000,
     0x0000, 0x0000, 0x013f, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
     0x0000, 0x013f, 0x013f, 0x013f, 0x013f, 0x013f, 0x013f, 0x0000,
     0x0000, 0x0000, 0x013f, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
     0x0000, 0x013f, 0x013f, 0x013f, 0x013f, 0x013f, 0x013f, 0x0000,
     0x0000, 0x0000, 0x013f, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
     0x0000, 0x0000, 0x0000, 0x013f, 0x013f, 0x013f, 0x0000, 0x0000
    ],
    # 36: dollar sign
    [
     0x0000, 0x0000, 0x07e4, 0x0000, 0x07e4, 0x0000, 0x0000, 0x0000,
     0x0000, 0x07e4, 0x07e4, 0x07e4, 0x07e4, 0x07e4, 0x0000, 0x0000,
     0x07e4, 0x0000, 0x07e4, 0x0000, 0x07e4, 0x0000, 0x07e4, 0x0000,
     0x07e4, 0x0000, 0x07e4, 0x0000, 0x07e4, 0x0000, 0x0000, 0x0000,
     0x0000, 0x07e4, 0x07e4, 0x07e4, 0x07e4, 0x07e4, 0x0000, 0x0000,
     0x0000, 0x0000, 0x07e4, 0x0000, 0x07e4, 0x0000, 0x07e4, 0x0000,
     0x07e4, 0x0000, 0x07e4, 0x0000, 0x07e4, 0x0000, 0x07e4, 0x0000,
     0x0000, 0x07e4, 0x07e4, 0x07e4, 0x07e4, 0x07e4, 0x0000, 0x0000
    ],
    # 37: HCL
    [
     0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
     0x0000, 0x04bf, 0x0000, 0x04bf, 0x0000, 0x04bf, 0x04bf, 0x04bf,
     0x0000, 0x04bf, 0x0000, 0x04bf, 0x04bf, 0x0000, 0x0000, 0x04bf,
     0x0000, 0x04bf, 0x0000, 0x04bf, 0x04bf, 0x0000, 0x0000, 0x04bf,
     0x04bf, 0x04bf, 0x04bf, 0x04bf, 0x0000, 0x0000, 0x04bf, 0x0000,
     0x04bf, 0x0000, 0x04bf, 0x04bf, 0x0000, 0x0000, 0x04bf, 0x0000,
     0x04bf, 0x0000, 0x04bf, 0x0000, 0x04bf, 0x04bf, 0x04bf, 0x04bf,
     0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000
    ],
    # 38: Vestas
    [
     0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
     0x0000, 0x07ff, 0x07ff, 0x0000, 0x0000, 0x0000, 0x0000, 0x07ff,
     0x0000, 0x0000, 0xffff, 0x07ff, 0x07ff, 0x0000, 0x07ff, 0x0000,
     0x0000, 0x0000, 0xffff, 0xffff, 0xffff, 0x07ff, 0x0000, 0x0000,
     0x0000, 0x0000, 0x0000, 0x0000, 0xffff, 0x07ff, 0x0000, 0x0000,
     0x0000, 0x0000, 0x0000, 0x0000, 0xffff, 0x0000, 0x07ff, 0x0000,
     0x0000, 0x0000, 0x0000, 0x0000, 0xffff, 0x0000, 0x07ff, 0x0000,
     0x0000, 0x0000, 0x0000, 0x0000, 0xffff, 0x0000, 0x0000, 0x0000
    ],
    # 39: Linde
    [
     0x481f, 0x481f, 0x481f, 0x481f, 0x481f, 0x481f, 0x481f, 0x481f,
     0x481f, 0x481f, 0x481f, 0x481f, 0xffff, 0xffff, 0xffff, 0x481f,
     0x481f, 0x481f, 0x481f, 0xffff, 0x481f, 0x481f, 0x481f, 0xffff,
     0x481f, 0x481f, 0x481f, 0xffff, 0x481f, 0x481f, 0x481f, 0x481f,
     0x481f, 0x481f, 0xffff, 0x481f, 0x481f, 0x481f, 0x481f, 0x481f,
     0x481f, 0xffff, 0xffff, 0x481f, 0x481f, 0x481f, 0xffff, 0x481f,
     0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0x481f, 0x481f,
     0x481f, 0x481f, 0x481f, 0x481f, 0x481f, 0x481f, 0x481f, 0x481f
    ]
    ]


def update_icon(x0,y0,nr):
    global pixel_framebuf
    onebmp = RGB_bmp[nr]
    for x in range(8):
       for y in range(8):
           pixel_framebuf.pixel(x0+x,y0+y,onebmp[x*8+y])

#for cnticon in range(len(RGB_bmp)):
#    pixel_framebuf.fill(0x000000)
#    update_icon(cnticon)
#    time.sleep(1)
#    pixel_framebuf.display()      

# ----------------------------
# re-define messages
def rgb_to_hex(rgb):
    return '0x%02x%02x%02x' % rgb


def message(client, topic, message):
    # This method is called when a topic the client is subscribed to
    # has a new message.
    command=struct.unpack('B',message[0])[0]
    print(command)
 
    if command == 0:
        print('Do: 0, draw text')
        (command_show_text,x,timeoffset_x,y,timeoffset_y,red_value,green_value,blue_value,timebyte) = struct.unpack('bbbbbBBB5s',message)
        newx = int(x << 8) + int(timeoffset_x)
        newy = int(y << 8) + int(timeoffset_y)       
        color = rgb_to_hex((red_value, green_value, blue_value))
        mytext=timebyte.decode()
        #print(newx, newy, color,mytext)
        c0_drawText(newx,newy,mytext,color)
    if command == 1:
        print('NA 1, draw bitmap, not implemented')
    if command == 2:
        print('Do: 2, draw circle')
        (command_show_text,x,timeoffset_x,y,timeoffset_y,radius, red_value,green_value,blue_value) = struct.unpack('bbbbbBBBB',message)
        newx = int(x << 8) + int(timeoffset_x)
        newy = int(y << 8) + int(timeoffset_y)
        color = rgb_to_hex((red_value, green_value, blue_value))
        mradius=int(radius)
        #print(newx,newy,mradius,color)
        c2_drawCircle(newx,newy,mradius,color)    
    if command == 3:
        print('Do: 3, draw fill circle')
        (command_show_text,x,timeoffset_x,y,timeoffset_y,radius, red_value,green_value,blue_value) = struct.unpack('bbbbbBBBB',message)
        newx = int(x << 8) + int(timeoffset_x)
        newy = int(y << 8) + int(timeoffset_y)
        color = rgb_to_hex((red_value, green_value, blue_value))
        mradius=int(radius)
        #print(newx,newy,mradius,color)
        c3_drawCircleFill(newx,newy,mradius,color) 
    if command == 4:
        print('Do: 4, draw pixel')
        (command_show_text,x,timeoffset_x,y,timeoffset_y, red_value,green_value,blue_value) = struct.unpack('bbbbbBBB',message)
        newx = int(x << 8) + int(timeoffset_x)
        newy = int(y << 8) + int(timeoffset_y)
        color = rgb_to_hex((red_value, green_value, blue_value))
        #print(newx,newy,color)
        c4_drawPixel(newxnewy,color)
    if command == 5:
        print('Do: 5, draw Rect')
        (command_show_text,x,timeoffset_x,y,timeoffset_y, width, height,red_value,green_value,blue_value) = struct.unpack('bbbbbBBBBB',message)
        newx = int(x << 8) + int(timeoffset_x)
        newy = int(y << 8) + int(timeoffset_y)
        w=int(width)
        h=int(height)
        color = rgb_to_hex((red_value, green_value, blue_value))
        #print(newx,newy,w,h,color)
        c5_drawRect(newx,newy,w,h,color)
    if command == 6:
        print('Do: 6, draw line')
        (command_show_text,x,timeoffset_x,y,timeoffset_y,x0,timeoffset_x0,y0,timeoffset_y0,red_value,green_value,blue_value) = struct.unpack('bbbbbbbbbBBB',message)
        newx = int(x << 8) + int(timeoffset_x)
        newy = int(y << 8) + int(timeoffset_y)
        newx0 = int(x0 << 8) + int(timeoffset_x0)
        newy0 = int(y0 << 8) + int(timeoffset_y0)  
        color = rgb_to_hex((red_value, green_value, blue_value))
        #print(newx,newy,newx0,newy0,color)
        c6_drawLine(newx,newy,newx0,newy0,color)
    if command == 7:
        print('Do: 7, draw screen fill complete')
        command_show_fill,red_fill,green_fill,blue_fill = struct.unpack('bBBB',message)
        color = rgb_to_hex((red_fill, green_fill, blue_fill))
        #print(color)
        c7_drawScreen(color) 
    if command == 8:
        print('Do: 8, draw Display framebuffer')
        c8_drawDisplay()
    if command == 9:
        print('Do: 9, draw Clear all')
        c9_drawClear()    
    if command == 10:
        print('10, play song')
        (command_playmp3,playtrack,playvolume)=struct.unpack('bbB',message)
        #print(type(playtrack))
        #print(type(playvolume))
        #print(type(command_playmp3))
        #print(playtrack, playvolume)
        ##print('Track: %d'% playtrack) 
        ##print('Vol: %d'% playvolume) 
        #mp3track = int(playtrack)
        #mp3vol = int(playvolume)
        song_play(playtrack, playvolume)
        
    if command == 11:
        print('NA 11, ECU Reset, not implemented')
    if command == 12:
        print('NA 12, Get Info, not implemented')
    if command == 13:
        print('Do: 13, draw Matrix brightness')
        command_change_brihtness,controllux=struct.unpack('bB',message)
        value=int(controllux)
        #print(value)
        c13_drawBrightness(value)
    if command == 14:
        print('NA 14, Save config, not implemented')                
    if command == 15:
        print('NA 15, Reset WiFi, not implemented')
    if command == 16:
        print('NA 16, Ping server, not implemented')                
    if command == 17:
        print('Do 17, 7Seg Display Update')
        (command_change_alarmtime,brightness,blinkrate,ascii1,ascii2,ascii3,ascii4,asciicolon) = struct.unpack('bBbbbbbb',message)
        display7seg_brightness(int(brightness))
        display7seg_blink(int(blinkrate))
        mycol=int(asciicolon)
        #print(type(ascii1))
        mystring=""
        if not(ascii1 == 23):
            if mycol==0:
                mystring=chr(ascii1) + chr(ascii2)  + chr(ascii3)  + chr(ascii4)
            else:
                 mystring=chr(ascii1) + chr(ascii2)  + ":" + chr(ascii3)  + chr(ascii4)
        print(mystring)
        display7seg_string(mystring)
    if command == 18:
        print('Do: 18, draw weather icon')
        (command_showicon,timeoffset_x,iconx,timeoffset_y,icony,myicon) = struct.unpack('bbbBBb',message)
        newx = int(timeoffset_x << 8) + int(iconx)
        newy = int(timeoffset_y << 8) + int(icony)
        nr=int(myicon)
        #print(newx,newy,nr)
        update_icon(newx,newy,nr)
    if command == 19:
        print('NA, 19, na, not implemented')
    if command == 20:
        print('NA, 20, Draw text with different fonts, not implemented')                
    if command == 21:
        print('NA, 21, na, not implemented')#
    if command == 22:
        print('22, FLickercounter??? Matrix flicker - TBD')
    if command == 23:
        print('23, Sound enable amp')
        song_stop()
    if command == 24:
        print('24, Sound disable amp')
        song_stop()
  # -------------------------------- INIT
# Clear display 
pixel_framebuf.fill(0x000000)
pixel_framebuf.display()


# Setup the callback methods above
mqtt_client.on_connect = connected
mqtt_client.on_disconnect = disconnected
mqtt_client.on_message = message

# Connect the client to the MQTT broker.
print("Connecting to MQTT...")
mqtt_client.connect()


while True:
    #- Module 1
    # Poll the message queue
    try:
        mqtt_client.loop()
    except Exception as err:
        print('mqtt schrott: %s' % str(err))
      
      
    #- Module 4
    button_middle.update()
    button_right.update()
    button_left.update()
    button_top.update()

    if button_middle.fell == True:
        print('pressed middle')
    if button_right.fell == True:
        print('pressed right')
    if button_left.fell == True:
        print('pressed left')
    if button_top.fell == True:
        print('pressed top')

    ##- Module 5
    ## Get raw (luminosity) readings individually
    #broadband = tsl.broadband
    #infrared = tsl.infrared
    ## Get computed lux value (tsl.lux can return None or a float)
    #lux = tsl.lux
    ## Print results
    #print("Enabled = {}".format(tsl.enabled))
    #print("Gain = {}".format(tsl.gain))
    #print("Integration time = {}".format(tsl.integration_time))
    #print("Broadband = {}".format(broadband))
    #print("Infrared = {}".format(infrared))
    #if lux is not None:
    #    print("Lux = {}".format(lux))
    #else:
    #    print("Lux value is None. Possible sensor underrange or overrange.")
           

      
    # Send a new message
    # print("Sending photocell value: %d..." % photocell_val)
    # mqtt_client.publish(photocell_feed, photocell_val)
    # print("Sent!")
    # photocell_val += 1
    
    
    
    time.sleep(0.1)

print("Done!")


